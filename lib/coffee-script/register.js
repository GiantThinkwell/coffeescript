// Generated by CoffeeScript 1.7.1
(function() {
  var CoffeeScript, Module, binary, child_process, ext, findExtension, fork, helpers, loadFile, path, _i, _len, _ref;

  CoffeeScript = require('./coffee-script');

  child_process = require('child_process');

  helpers = require('./helpers');

  path = require('path');
  fs = require('fs');

  loadFile = function(module, coffeeFilePath) {
    var baseCoffeeFileName = path.basename(coffeeFilePath);
    var answer;

    answer = CoffeeScript._compileFile(coffeeFilePath, true);

    sourceMap = answer.sourceMap.generate({
      sourceRoot: "", 
      generatedFile: baseCoffeeFileName.replace('.coffee', '.js'),
      sourceFiles: [ baseCoffeeFileName ],
      inline: true
    }, answer.code);

    console.log('compiled with sourceMap\n', sourceMap);
    console.log('-----------------------');

    // fs.writeFile(coffeeFilePath.replace('.coffee', '.map'), sourceMap, function(err) {
    //   if (err) {
    //     return console.log("Could not write sourceMap", err.message);
    //   }   
    // });

    var base64Map = new Buffer(JSON.stringify(sourceMap)).toString('base64');
    answer.js += '\n//# sourceMappingURL=data:application/json;base64,' + base64Map;
    answer.js += '\n';

    // answer.js += '\n//# sourceMappingURL=' + baseCoffeeFileName.replace('.coffee', '.map');

    console.log('compilation results\n', answer.js);
    console.log('-------------------');

    return module._compile(answer.js, coffeeFilePath);
  };

  if (require.extensions) {
    _ref = CoffeeScript.FILE_EXTENSIONS;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ext = _ref[_i];
      require.extensions[ext] = loadFile;
    }
    Module = require('module');
    findExtension = function(filename) {
      var curExtension, extensions;
      extensions = path.basename(filename).split('.');
      if (extensions[0] === '') {
        extensions.shift();
      }
      while (extensions.shift()) {
        curExtension = '.' + extensions.join('.');
        if (Module._extensions[curExtension]) {
          return curExtension;
        }
      }
      return '.js';
    };
    Module.prototype.load = function(filename) {
      var extension;
      this.filename = filename;
      this.paths = Module._nodeModulePaths(path.dirname(filename));
      extension = findExtension(filename);
      Module._extensions[extension](this, filename);
      return this.loaded = true;
    };
  }

  if (child_process) {
    fork = child_process.fork;
    binary = require.resolve('../../bin/coffee');
    child_process.fork = function(path, args, options) {
      if (helpers.isCoffee(path)) {
        if (!Array.isArray(args)) {
          options = args || {};
          args = [];
        }
        args = [path].concat(args);
        path = binary;
      }
      return fork(path, args, options);
    };
  }

}).call(this);
